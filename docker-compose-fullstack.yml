# Monero Full Stack: Miner + Full Daemon + Monitoring
# Optimized for Raspberry Pi 5 with complete blockchain (~200GB)
# Container naming: monerod-rpi5 for consistency

services:
  monero-miner-rpi5:
    build: 
      context: .
    container_name: monero-miner-rpi5
    restart: unless-stopped
    depends_on:
      monerod-rpi5:
        condition: service_healthy
    
    environment:
      - POOL_URL=${POOL_URL:-pool.supportxmr.com:3333}
      - WALLET_ADDRESS=${WALLET_ADDRESS:-}
      - WORKER_NAME=${WORKER_NAME:-rpi5-fullstack-miner-optimized}
      - CPU_THREADS=${CPU_THREADS:-3}
      - CPU_PRIORITY=${CPU_PRIORITY:-4}
      - LOG_LEVEL=${LOG_LEVEL:-2}
      - POOL_PASSWORD=${POOL_PASSWORD:-x}
      - API_ENABLED=${API_ENABLED:-true}
      - API_PORT=${API_PORT:-8080}
      - DAEMON_HOST=monerod-rpi5
      - DAEMON_PORT=18081
    
    ports:
      - "8080:8080"
    
    volumes:
      - ./config:/home/miner/.xmrig
      - ./logs/miner:/var/log/miner
      - ./wallets:/home/miner/.bitmonero
      - xmrig-cache:/home/miner/.cache
    
    networks:
      - monero-net
      - monitoring
    
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"

  monerod-rpi5:
    image: sethsimmons/simple-monerod:latest
    container_name: monerod-rpi5
    restart: unless-stopped
    
    command: >
      --rpc-bind-ip=0.0.0.0
      --rpc-bind-port=18081
      --restricted-rpc
      --confirm-external-bind
      --non-interactive
      --no-igd
      --db-sync-mode=fast:async:250000000bytes
      --fast-block-sync=1
      --block-sync-size=20
      --prep-blocks-threads=2
      --max-concurrency=2
    
    ports:
      - "18081:18081"
      - "18080:18080"
    
    volumes:
      - monerod-data:/home/monero/.bitmonero
      - ./logs/daemon:/var/log/monerod
    
    networks:
      - monero-net
      - monitoring
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:18081/get_info"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 300s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    networks:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    ports:
      - "3000:3000"
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - monitoring

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    
    ports:
      - "9100:9100"
    
    volumes:
      - /:/host:ro,rslave
    
    networks:
      - monitoring

  # Cadvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    
    ports:
      - "8081:8080"
    
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    
    networks:
      - monitoring

volumes:
  xmrig-cache:
    driver: local
  monerod-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  monero-net:
    driver: bridge
  monitoring:
    driver: bridge